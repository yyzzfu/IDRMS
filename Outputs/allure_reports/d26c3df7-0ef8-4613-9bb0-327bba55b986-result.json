{"name": "智能网关告警设置--新增功能", "status": "broken", "statusDetails": {"message": "selenium.common.exceptions.ElementClickInterceptedException: Message: element click intercepted: Element <b></b> is not clickable at point (460, 321). Other element would receive the click: <div class=\"select2-drop select2-display-none select2-with-searchbox select2-drop-active\" id=\"select2-drop\" style=\"left: 200px; width: 270px; top: 291.25px; bottom: auto; display: block;\">...</div>\n  (Session info: chrome=89.0.4389.72)", "trace": "self = <TestCases.test_9_alarm_set.TestDataPointManage object at 0x00E6B830>, data = {'alarm_data': '样机SF6告警', 'alarm_type': 'SF6气体', 'cabinet_or_transformer': None, 'case_id': 48, ...}\nenter_the_homepage = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"69096358082f52d2ef2ddc640d0c9bcc\")>\n\n    @pytest.mark.parametrize('data', datas)\n    @allure.title('智能网关告警设置--新增功能')\n    def test_add_alarm_set(self, data, enter_the_homepage):\n        AlarmSetPage(enter_the_homepage).add_alarm_set(room=data['room_name'], monitoring=data['monitoring_name'], node_position=data['node_position'],\n                                                       cabinet_or_transformer=data['cabinet_or_transformer'], alarm_type=data['alarm_type'],\n                                                       alarm_data=data['alarm_data'], value_feedback_point=data['value_feedback_point'],\n>                                                      upper_limit=data['upper_limit'], remark=data['remark'])\n\nTestCases\\test_9_alarm_set.py:26: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\nPageObjects\\ArchiveManagementPages\\alarm_set_page.py:88: in add_alarm_set\n    self.edit_alarm_set(room, monitoring, node_position, cabinet_or_transformer, alarm_type, alarm_data, value_feedback_point, upper_limit, remark, mode=None)\nPageObjects\\ArchiveManagementPages\\alarm_set_page.py:62: in edit_alarm_set\n    self.click_element(loc.open_value_feedback_point_select)\nCommon\\basepage.py:122: in click_element\n    ele.click()\n..\\..\\appdata\\local\\programs\\python\\python36-32\\lib\\site-packages\\selenium\\webdriver\\remote\\webelement.py:80: in click\n    self._execute(Command.CLICK_ELEMENT)\n..\\..\\appdata\\local\\programs\\python\\python36-32\\lib\\site-packages\\selenium\\webdriver\\remote\\webelement.py:633: in _execute\n    return self._parent.execute(command, params)\n..\\..\\appdata\\local\\programs\\python\\python36-32\\lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:321: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x2E2C5DF0>\nresponse = {'status': 400, 'value': '{\"value\":{\"error\":\"element click intercepted\",\"message\":\"element click intercepted: Element ...\\n\\\\tRtlGetAppContainerNamedObjectPath [0x772376B4+228]\\\\n\\\\tRtlGetAppContainerNamedObjectPath [0x77237684+180]\\\\n\"}}'}\n\n    def check_response(self, response):\n        \"\"\"\n        Checks that a JSON response from the WebDriver does not have an error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get('status', None)\n        if status is None or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get('value', None)\n            if value_json and isinstance(value_json, basestring):\n                import json\n                try:\n                    value = json.loads(value_json)\n                    if len(value.keys()) == 1:\n                        value = value['value']\n                    status = value.get('error', None)\n                    if status is None:\n                        status = value[\"status\"]\n                        message = value[\"value\"]\n                        if not isinstance(message, basestring):\n                            value = message\n                            message = message.get('message')\n                    else:\n                        message = value.get('message', None)\n                except ValueError:\n                    pass\n    \n        exception_class = ErrorInResponseException\n        if status in ErrorCode.NO_SUCH_ELEMENT:\n            exception_class = NoSuchElementException\n        elif status in ErrorCode.NO_SUCH_FRAME:\n            exception_class = NoSuchFrameException\n        elif status in ErrorCode.NO_SUCH_WINDOW:\n            exception_class = NoSuchWindowException\n        elif status in ErrorCode.STALE_ELEMENT_REFERENCE:\n            exception_class = StaleElementReferenceException\n        elif status in ErrorCode.ELEMENT_NOT_VISIBLE:\n            exception_class = ElementNotVisibleException\n        elif status in ErrorCode.INVALID_ELEMENT_STATE:\n            exception_class = InvalidElementStateException\n        elif status in ErrorCode.INVALID_SELECTOR \\\n                or status in ErrorCode.INVALID_XPATH_SELECTOR \\\n                or status in ErrorCode.INVALID_XPATH_SELECTOR_RETURN_TYPER:\n            exception_class = InvalidSelectorException\n        elif status in ErrorCode.ELEMENT_IS_NOT_SELECTABLE:\n            exception_class = ElementNotSelectableException\n        elif status in ErrorCode.ELEMENT_NOT_INTERACTABLE:\n            exception_class = ElementNotInteractableException\n        elif status in ErrorCode.INVALID_COOKIE_DOMAIN:\n            exception_class = InvalidCookieDomainException\n        elif status in ErrorCode.UNABLE_TO_SET_COOKIE:\n            exception_class = UnableToSetCookieException\n        elif status in ErrorCode.TIMEOUT:\n            exception_class = TimeoutException\n        elif status in ErrorCode.SCRIPT_TIMEOUT:\n            exception_class = TimeoutException\n        elif status in ErrorCode.UNKNOWN_ERROR:\n            exception_class = WebDriverException\n        elif status in ErrorCode.UNEXPECTED_ALERT_OPEN:\n            exception_class = UnexpectedAlertPresentException\n        elif status in ErrorCode.NO_ALERT_OPEN:\n            exception_class = NoAlertPresentException\n        elif status in ErrorCode.IME_NOT_AVAILABLE:\n            exception_class = ImeNotAvailableException\n        elif status in ErrorCode.IME_ENGINE_ACTIVATION_FAILED:\n            exception_class = ImeActivationFailedException\n        elif status in ErrorCode.MOVE_TARGET_OUT_OF_BOUNDS:\n            exception_class = MoveTargetOutOfBoundsException\n        elif status in ErrorCode.JAVASCRIPT_ERROR:\n            exception_class = JavascriptException\n        elif status in ErrorCode.SESSION_NOT_CREATED:\n            exception_class = SessionNotCreatedException\n        elif status in ErrorCode.INVALID_ARGUMENT:\n            exception_class = InvalidArgumentException\n        elif status in ErrorCode.NO_SUCH_COOKIE:\n            exception_class = NoSuchCookieException\n        elif status in ErrorCode.UNABLE_TO_CAPTURE_SCREEN:\n            exception_class = ScreenshotException\n        elif status in ErrorCode.ELEMENT_CLICK_INTERCEPTED:\n            exception_class = ElementClickInterceptedException\n        elif status in ErrorCode.INSECURE_CERTIFICATE:\n            exception_class = InsecureCertificateException\n        elif status in ErrorCode.INVALID_COORDINATES:\n            exception_class = InvalidCoordinatesException\n        elif status in ErrorCode.INVALID_SESSION_ID:\n            exception_class = InvalidSessionIdException\n        elif status in ErrorCode.UNKNOWN_METHOD:\n            exception_class = UnknownMethodException\n        else:\n            exception_class = WebDriverException\n        if value == '' or value is None:\n            value = response['value']\n        if isinstance(value, basestring):\n            if exception_class == ErrorInResponseException:\n                raise exception_class(response, value)\n            raise exception_class(value)\n        if message == \"\" and 'message' in value:\n            message = value['message']\n    \n        screen = None\n        if 'screen' in value:\n            screen = value['screen']\n    \n        stacktrace = None\n        if 'stackTrace' in value and value['stackTrace']:\n            stacktrace = []\n            try:\n                for frame in value['stackTrace']:\n                    line = self._value_or_default(frame, 'lineNumber', '')\n                    file = self._value_or_default(frame, 'fileName', '<anonymous>')\n                    if line:\n                        file = \"%s:%s\" % (file, line)\n                    meth = self._value_or_default(frame, 'methodName', '<anonymous>')\n                    if 'className' in frame:\n                        meth = \"%s.%s\" % (frame['className'], meth)\n                    msg = \"    at %s (%s)\"\n                    msg = msg % (meth, file)\n                    stacktrace.append(msg)\n            except TypeError:\n                pass\n        if exception_class == ErrorInResponseException:\n            raise exception_class(response, message)\n        elif exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if 'data' in value:\n                alert_text = value['data'].get('text')\n            elif 'alert' in value:\n                alert_text = value['alert'].get('text')\n            raise exception_class(message, screen, stacktrace, alert_text)\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.ElementClickInterceptedException: Message: element click intercepted: Element <b></b> is not clickable at point (460, 321). Other element would receive the click: <div class=\"select2-drop select2-display-none select2-with-searchbox select2-drop-active\" id=\"select2-drop\" style=\"left: 200px; width: 270px; top: 291.25px; bottom: auto; display: block;\">...</div>\nE         (Session info: chrome=89.0.4389.72)\n\n..\\..\\appdata\\local\\programs\\python\\python36-32\\lib\\site-packages\\selenium\\webdriver\\remote\\errorhandler.py:242: ElementClickInterceptedException"}, "attachments": [{"name": "log", "source": "2e9c3c96-56d6-4556-b40a-5bb32cf2f230-attachment.txt", "type": "text/plain"}, {"name": "stderr", "source": "488aa52d-6ba3-4a1f-941a-de8b221a48cc-attachment.txt", "type": "text/plain"}], "parameters": [{"name": "data", "value": "{'case_id': 48, 'sheet_name': 'alarm_set', 'title': '正常添加', 'room_name': '样机配电房', 'monitoring_name': '样机一体机', 'node_position': '环境', 'cabinet_or_transformer': None, 'alarm_type': 'SF6气体', 'alarm_data': '样机SF6告警', 'value_feedback_point': '样机SF6', 'upper_limit': None, 'remark': None}"}], "start": 1615194115796, "stop": 1615194120521, "uuid": "b159a0c0-df24-4f77-a8eb-a9555737ad75", "historyId": "63c1a99c55f059fdac189ec2862c151b", "testCaseId": "a4033b1a73f9cd2f316d8970f35ee4a4", "fullName": "TestCases.test_9_alarm_set.TestDataPointManage#test_add_alarm_set", "labels": [{"name": "feature", "value": "档案管理"}, {"name": "epic", "value": "项目名称：配电房平台V1.0"}, {"name": "story", "value": "智能网关告警设置"}, {"name": "tag", "value": "@pytest.mark.usefixtures('refresh')"}, {"name": "parentSuite", "value": "TestCases"}, {"name": "suite", "value": "test_9_alarm_set"}, {"name": "subSuite", "value": "TestDataPointManage"}, {"name": "host", "value": "DESKTOP-901EL0R"}, {"name": "thread", "value": "3820-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "TestCases.test_9_alarm_set"}]}